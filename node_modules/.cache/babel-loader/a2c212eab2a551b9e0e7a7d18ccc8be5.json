{"ast":null,"code":"var _jsxFileName = \"/Users/amit/MBTA/src/components/Table/container.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { TableUI } from \"./ui\";\nimport get from \"lodash/get\";\nimport * as axios from \"axios\"; // for making API calls\n\nconst BASE_URL = \"https://api-v3.mbta.com\";\nconst ROUTE_TYPE = 2; // 2=commuter rail\n// const DIRECTION_ID = 0; // departuring from\n\nconst INCLUDES = [\"stop\", \"trip\", \"schedule\"];\nconst HEADERS = [\"Time\", \"Destination\", \"Train #\", \"Track #\", \"Status\"];\n\nclass TableContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.getDepartures = this.getDepartures.bind(this);\n    this.buildUrl = this.buildUrl.bind(this);\n    this.processResponse = this.processResponse.bind(this);\n    this.state = {\n      errorMessage: null,\n      departures: null\n    };\n  }\n\n  buildUrl(station) {\n    // const filters = `filter[stop]=${station}&filter[route_type]=${ROUTE_TYPE}&filter[direction_id]=${DIRECTION_ID}`;\n    const filters = `filter[stop]=${station}&filter[route_type]=${ROUTE_TYPE}`;\n    return `${BASE_URL}/predictions?${filters}&include=${INCLUDES.join()}`;\n  }\n\n  processResponse(response) {\n    const included = response.included;\n    const predictionsResponse = response.data;\n\n    if (predictionsResponse && included) {\n      // if departure_time is null, it means a final stop, so we remove those:\n      const filteredDepartures = predictionsResponse.filter(dp => dp.attributes.departure_time !== null);\n      const departures = []; // get trips, stops and schedules which we'll read from later:\n\n      const trips = included.filter(dp => dp.type === \"trip\");\n      const stops = included.filter(dp => dp.type === \"stop\");\n      const schedules = included.filter(dp => dp.type === \"schedule\");\n      filteredDepartures.forEach(p => {\n        const status = get(p, \"attributes.status\");\n        const name = get(p, \"relationships.route.data.id\"); // get details from the stop by stopId so we can get the track\n\n        const stopId = get(p, \"relationships.stop.data.id\");\n        const stopInfo = stops.find(stop => stop.id === stopId);\n        const track = get(stopInfo, \"attributes.platform_code\"); // get details from the trip by tripId so we can get the train #\n\n        const tripId = get(p, \"relationships.trip.data.id\");\n        const tripInfo = trips.find(trip => trip.id === tripId);\n        const vehicle = get(tripInfo, \"attributes.name\"); // get details from the schedule by scheduleId so we can get the departure time\n\n        const scheduleId = get(p, \"relationships.schedule.data.id\");\n        const scheduleInfo = schedules.find(schedule => schedule.id === scheduleId);\n        const departureTime = get(scheduleInfo, \"attributes.departure_time\"); // gather all the information\n\n        departures.push({\n          name,\n          departureTime: new Date(departureTime),\n          status,\n          vehicle,\n          track: track !== null ? track : \"TBD\"\n        });\n      }); // sort departures in ascending order\n\n      departures.sort((a, b) => a.departureTime - b.departureTime);\n      this.setState({\n        departures\n      });\n    }\n  }\n\n  getDepartures(station) {\n    const url = this.buildUrl(station);\n    const t = this;\n    axios.get(url).then(function (response) {\n      if (response.status === 200 && response.data) {\n        t.setState({\n          errorMessage: null\n        });\n        t.processResponse(response.data);\n      }\n    }).catch(function (error) {\n      t.setState({\n        errorMessage: error\n      });\n    });\n  }\n\n  setTimer() {\n    const selectedStation = this.props.selectedStation;\n    this.intervalID = setInterval(() => this.getDepartures(selectedStation), 60000);\n  }\n\n  componentDidMount() {\n    const selectedStation = this.props.selectedStation;\n    this.getDepartures(selectedStation);\n    this.setTimer();\n  }\n\n  componentDidUpdate(prevProps) {\n    const selectedStation = this.props.selectedStation;\n\n    if (prevProps.selectedStation !== selectedStation) {\n      this.getDepartures(selectedStation); // clearInterval and reset again:\n\n      clearInterval(this.intervalID);\n      this.setTimer();\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n\n  render() {\n    const _this$state = this.state,\n          departures = _this$state.departures,\n          errorMessage = _this$state.errorMessage;\n    const setSelection = this.props.setSelection;\n    return React.createElement(TableUI, {\n      headers: HEADERS,\n      departures: departures,\n      setSelection: setSelection,\n      errorMessage: errorMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    });\n  }\n\n}\n\nTableContainer.propTypes = {\n  setSelection: PropTypes.func,\n  selectedStation: PropTypes.string\n};\nexport const Table = TableContainer;","map":{"version":3,"sources":["/Users/amit/MBTA/src/components/Table/container.js"],"names":["React","PropTypes","TableUI","get","axios","BASE_URL","ROUTE_TYPE","INCLUDES","HEADERS","TableContainer","Component","constructor","props","getDepartures","bind","buildUrl","processResponse","state","errorMessage","departures","station","filters","join","response","included","predictionsResponse","data","filteredDepartures","filter","dp","attributes","departure_time","trips","type","stops","schedules","forEach","p","status","name","stopId","stopInfo","find","stop","id","track","tripId","tripInfo","trip","vehicle","scheduleId","scheduleInfo","schedule","departureTime","push","Date","sort","a","b","setState","url","t","then","catch","error","setTimer","selectedStation","intervalID","setInterval","componentDidMount","componentDidUpdate","prevProps","clearInterval","componentWillUnmount","render","setSelection","propTypes","func","string","Table"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { TableUI } from \"./ui\";\r\nimport get from \"lodash/get\";\r\nimport * as axios from \"axios\"; // for making API calls\r\n\r\nconst BASE_URL = \"https://api-v3.mbta.com\";\r\nconst ROUTE_TYPE = 2; // 2=commuter rail\r\n// const DIRECTION_ID = 0; // departuring from\r\nconst INCLUDES = [\"stop\", \"trip\", \"schedule\"];\r\nconst HEADERS = [\"Time\", \"Destination\", \"Train #\", \"Track #\", \"Status\"];\r\n\r\nclass TableContainer extends React.Component {\r\n  static propTypes = {\r\n    setSelection: PropTypes.func,\r\n    selectedStation: PropTypes.string,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.getDepartures = this.getDepartures.bind(this);\r\n    this.buildUrl = this.buildUrl.bind(this);\r\n    this.processResponse = this.processResponse.bind(this);\r\n    this.state = {\r\n      errorMessage: null,\r\n      departures: null,\r\n    };\r\n  }\r\n\r\n  buildUrl(station) {\r\n    // const filters = `filter[stop]=${station}&filter[route_type]=${ROUTE_TYPE}&filter[direction_id]=${DIRECTION_ID}`;\r\n    const filters = `filter[stop]=${station}&filter[route_type]=${ROUTE_TYPE}`;\r\n\r\n    return `${BASE_URL}/predictions?${filters}&include=${INCLUDES.join()}`;\r\n  }\r\n\r\n  processResponse(response) {\r\n    const included = response.included;\r\n    const predictionsResponse = response.data;\r\n    if (predictionsResponse && included) {\r\n      // if departure_time is null, it means a final stop, so we remove those:\r\n      const filteredDepartures = predictionsResponse.filter(\r\n        (dp) => dp.attributes.departure_time !== null\r\n      );\r\n\r\n      const departures = [];\r\n\r\n      // get trips, stops and schedules which we'll read from later:\r\n      const trips = included.filter((dp) => dp.type === \"trip\");\r\n      const stops = included.filter((dp) => dp.type === \"stop\");\r\n      const schedules = included.filter((dp) => dp.type === \"schedule\");\r\n\r\n      filteredDepartures.forEach((p) => {\r\n        const status = get(p, \"attributes.status\");\r\n        const name = get(p, \"relationships.route.data.id\");\r\n\r\n        // get details from the stop by stopId so we can get the track\r\n        const stopId = get(p, \"relationships.stop.data.id\");\r\n        const stopInfo = stops.find((stop) => stop.id === stopId);\r\n        const track = get(stopInfo, \"attributes.platform_code\");\r\n\r\n        // get details from the trip by tripId so we can get the train #\r\n        const tripId = get(p, \"relationships.trip.data.id\");\r\n        const tripInfo = trips.find((trip) => trip.id === tripId);\r\n        const vehicle = get(tripInfo, \"attributes.name\");\r\n\r\n        // get details from the schedule by scheduleId so we can get the departure time\r\n        const scheduleId = get(p, \"relationships.schedule.data.id\");\r\n        const scheduleInfo = schedules.find(\r\n          (schedule) => schedule.id === scheduleId\r\n        );\r\n        const departureTime = get(scheduleInfo, \"attributes.departure_time\");\r\n\r\n        // gather all the information\r\n        departures.push({\r\n          name,\r\n          departureTime: new Date(departureTime),\r\n          status,\r\n          vehicle,\r\n          track: track !== null ? track : \"TBD\",\r\n        });\r\n      });\r\n      // sort departures in ascending order\r\n      departures.sort((a, b) => a.departureTime - b.departureTime);\r\n      this.setState({ departures });\r\n    }\r\n  }\r\n\r\n  getDepartures(station) {\r\n    const url = this.buildUrl(station);\r\n\r\n    const t = this;\r\n    axios\r\n      .get(url)\r\n      .then(function (response) {\r\n        if (response.status === 200 && response.data) {\r\n          t.setState({ errorMessage: null });\r\n          t.processResponse(response.data);\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        t.setState({ errorMessage: error });\r\n      });\r\n  }\r\n\r\n  setTimer() {\r\n    const { selectedStation } = this.props;\r\n    this.intervalID = setInterval(\r\n      () => this.getDepartures(selectedStation),\r\n      60000\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { selectedStation } = this.props;\r\n    this.getDepartures(selectedStation);\r\n\r\n    this.setTimer();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { selectedStation } = this.props;\r\n\r\n    if (prevProps.selectedStation !== selectedStation) {\r\n      this.getDepartures(selectedStation);\r\n\r\n      // clearInterval and reset again:\r\n      clearInterval(this.intervalID);\r\n      this.setTimer();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.intervalID);\r\n  }\r\n\r\n  render() {\r\n    const { departures, errorMessage } = this.state;\r\n    const { setSelection } = this.props;\r\n    return (\r\n      <TableUI\r\n        headers={HEADERS}\r\n        departures={departures}\r\n        setSelection={setSelection}\r\n        errorMessage={errorMessage}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport const Table = TableContainer;\r\n"]},"metadata":{},"sourceType":"module"}