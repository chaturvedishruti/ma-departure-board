{"ast":null,"code":"var _jsxFileName = \"/Users/amit/MBTA/src/components/Table/container.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { TableUI } from \"./ui\";\nimport get from \"lodash/get\";\nimport * as axios from \"axios\"; // for making API calls\n\nconst BASE_URL = \"https://api-v3.mbta.com\";\nconst ROUTE_TYPE = 2; // 2=commuter rail\n// const DIRECTION_ID = 0; // departuring from\n\nconst INCLUDES = [\"stop\", \"trip\", \"schedule\"];\nconst HEADERS = [\"Carrier\", \"Time\", \"Destination\", \"Train#\", \"Track#\", \"Status\"];\n\nclass TableContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.buildUrl = station => {\n      // const filters = `filter[stop]=${station}&filter[route_type]=${ROUTE_TYPE}&filter[direction_id]=${DIRECTION_ID}`;\n      const filters = `filter[stop]=${station}&filter[route_type]=${ROUTE_TYPE}`;\n      return `${BASE_URL}/predictions?${filters}&include=${INCLUDES.join()}`;\n    };\n\n    this.getDepartures = station => {\n      const url = this.buildUrl(station);\n      const t = this;\n      axios.get(url).then(function (response) {\n        if (response.status === 200 && response.data) {\n          t.setState({\n            errorMessage: null\n          });\n          t.processResponse(response.data);\n        }\n      }).catch(function (error) {\n        t.setState({\n          errorMessage: error\n        });\n      });\n    };\n  }\n\n  processResponse(response) {\n    const included = response.included;\n    const predictionsResponse = response.data;\n\n    if (predictionsResponse && included) {\n      // if departure_time is null, it means a final stop, so we remove those:\n      const filteredDepartures = predictionsResponse.filter(dp => dp.attributes.departure_time !== null);\n      const departures = []; // get trips, stops and schedules which we'll read from later:\n\n      const trips = included.filter(dp => dp.type === \"trip\");\n      const stops = included.filter(dp => dp.type === \"stop\");\n      const schedules = included.filter(dp => dp.type === \"schedule\");\n      filteredDepartures.forEach(p => {\n        const status = get(p, \"attributes.status\");\n        const name = get(p, \"relationships.route.data.id\"); // get details from the stop by stopId so we can get the track\n\n        const stopId = get(p, \"relationships.stop.data.id\");\n        const stopInfo = stops.find(stop => stop.id === stopId);\n        const track = get(stopInfo, \"attributes.platform_code\"); // get details from the trip by tripId so we can get the train #\n\n        const tripId = get(p, \"relationships.trip.data.id\");\n        const tripInfo = trips.find(trip => trip.id === tripId);\n        const vehicle = get(tripInfo, \"attributes.name\"); // get details from the schedule by scheduleId so we can get the departure time\n\n        const scheduleId = get(p, \"relationships.schedule.data.id\"); //get details for MBTA as the only carrier\n\n        const carrier = \"MBTA\";\n        const scheduleInfo = schedules.find(schedule => schedule.id === scheduleId);\n        const departureTime = get(scheduleInfo, \"attributes.departure_time\"); // gather all the information\n\n        departures.push({\n          name,\n          departureTime: new Date(departureTime),\n          status,\n          vehicle,\n          track: track !== null ? track : \"TBD\",\n          carrier\n        });\n      }); // sort departures in ascending order\n\n      departures.sort((a, b) => a.departureTime - b.departureTime);\n      this.setState({\n        departures\n      });\n    }\n  }\n\n  setTimer() {\n    const selectedStation = this.props.selectedStation;\n    this.intervalID = setInterval(() => this.getDepartures(selectedStation), 60000);\n  }\n\n  componentDidMount() {\n    const selectedStation = this.props.selectedStation;\n    this.getDepartures(selectedStation);\n    this.setTimer();\n  }\n\n  componentDidUpdate(prevProps) {\n    const selectedStation = this.props.selectedStation;\n\n    if (prevProps.selectedStation !== selectedStation) {\n      this.getDepartures(selectedStation); // clearInterval and reset again:\n\n      clearInterval(this.intervalID);\n      this.setTimer();\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n\n  render() {\n    const _this$state = this.state,\n          departures = _this$state.departures,\n          errorMessage = _this$state.errorMessage;\n    const setSelection = this.props.setSelection;\n    return React.createElement(TableUI, {\n      headers: HEADERS,\n      departures: departures,\n      setSelection: setSelection,\n      errorMessage: errorMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    });\n  }\n\n}\n\nTableContainer.propTypes = {\n  setSelection: PropTypes.func,\n  selectedStation: PropTypes.string\n};\nexport const Table = TableContainer;","map":{"version":3,"sources":["/Users/amit/MBTA/src/components/Table/container.js"],"names":["React","PropTypes","TableUI","get","axios","BASE_URL","ROUTE_TYPE","INCLUDES","HEADERS","TableContainer","Component","buildUrl","station","filters","join","getDepartures","url","t","then","response","status","data","setState","errorMessage","processResponse","catch","error","included","predictionsResponse","filteredDepartures","filter","dp","attributes","departure_time","departures","trips","type","stops","schedules","forEach","p","name","stopId","stopInfo","find","stop","id","track","tripId","tripInfo","trip","vehicle","scheduleId","carrier","scheduleInfo","schedule","departureTime","push","Date","sort","a","b","setTimer","selectedStation","props","intervalID","setInterval","componentDidMount","componentDidUpdate","prevProps","clearInterval","componentWillUnmount","render","state","setSelection","propTypes","func","string","Table"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB,C,CAAgC;;AAEhC,MAAMC,QAAQ,GAAG,yBAAjB;AACA,MAAMC,UAAU,GAAG,CAAnB,C,CAAsB;AACtB;;AACA,MAAMC,QAAQ,GAAG,CAAC,MAAD,EAAS,MAAT,EAAiB,UAAjB,CAAjB;AACA,MAAMC,OAAO,GAAG,CACd,SADc,EAEd,MAFc,EAGd,aAHc,EAId,QAJc,EAKd,QALc,EAMd,QANc,CAAhB;;AASA,MAAMC,cAAN,SAA6BT,KAAK,CAACU,SAAnC,CAA6C;AAAA;AAAA;;AAAA,SAkB3CC,QAlB2C,GAkB/BC,OAAD,IAAa;AACtB;AACA,YAAMC,OAAO,GAAI,gBAAeD,OAAQ,uBAAsBN,UAAW,EAAzE;AAEA,aAAQ,GAAED,QAAS,gBAAeQ,OAAQ,YAAWN,QAAQ,CAACO,IAAT,EAAgB,EAArE;AACD,KAvB0C;;AAAA,SAgF3CC,aAhF2C,GAgF1BH,OAAD,IAAa;AAC3B,YAAMI,GAAG,GAAG,KAAKL,QAAL,CAAcC,OAAd,CAAZ;AAEA,YAAMK,CAAC,GAAG,IAAV;AACAb,MAAAA,KAAK,CACFD,GADH,CACOa,GADP,EAEGE,IAFH,CAEQ,UAAUC,QAAV,EAAoB;AACxB,YAAIA,QAAQ,CAACC,MAAT,KAAoB,GAApB,IAA2BD,QAAQ,CAACE,IAAxC,EAA8C;AAC5CJ,UAAAA,CAAC,CAACK,QAAF,CAAW;AAAEC,YAAAA,YAAY,EAAE;AAAhB,WAAX;AACAN,UAAAA,CAAC,CAACO,eAAF,CAAkBL,QAAQ,CAACE,IAA3B;AACD;AACF,OAPH,EAQGI,KARH,CAQS,UAAUC,KAAV,EAAiB;AACtBT,QAAAA,CAAC,CAACK,QAAF,CAAW;AAAEC,UAAAA,YAAY,EAAEG;AAAhB,SAAX;AACD,OAVH;AAWD,KA/F0C;AAAA;;AAyB3CF,EAAAA,eAAe,CAACL,QAAD,EAAW;AACxB,UAAMQ,QAAQ,GAAGR,QAAQ,CAACQ,QAA1B;AACA,UAAMC,mBAAmB,GAAGT,QAAQ,CAACE,IAArC;;AACA,QAAIO,mBAAmB,IAAID,QAA3B,EAAqC;AACnC;AACA,YAAME,kBAAkB,GAAGD,mBAAmB,CAACE,MAApB,CACxBC,EAAD,IAAQA,EAAE,CAACC,UAAH,CAAcC,cAAd,KAAiC,IADhB,CAA3B;AAIA,YAAMC,UAAU,GAAG,EAAnB,CANmC,CAQnC;;AACA,YAAMC,KAAK,GAAGR,QAAQ,CAACG,MAAT,CAAiBC,EAAD,IAAQA,EAAE,CAACK,IAAH,KAAY,MAApC,CAAd;AACA,YAAMC,KAAK,GAAGV,QAAQ,CAACG,MAAT,CAAiBC,EAAD,IAAQA,EAAE,CAACK,IAAH,KAAY,MAApC,CAAd;AACA,YAAME,SAAS,GAAGX,QAAQ,CAACG,MAAT,CAAiBC,EAAD,IAAQA,EAAE,CAACK,IAAH,KAAY,UAApC,CAAlB;AAEAP,MAAAA,kBAAkB,CAACU,OAAnB,CAA4BC,CAAD,IAAO;AAChC,cAAMpB,MAAM,GAAGjB,GAAG,CAACqC,CAAD,EAAI,mBAAJ,CAAlB;AACA,cAAMC,IAAI,GAAGtC,GAAG,CAACqC,CAAD,EAAI,6BAAJ,CAAhB,CAFgC,CAIhC;;AACA,cAAME,MAAM,GAAGvC,GAAG,CAACqC,CAAD,EAAI,4BAAJ,CAAlB;AACA,cAAMG,QAAQ,GAAGN,KAAK,CAACO,IAAN,CAAYC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYJ,MAAjC,CAAjB;AACA,cAAMK,KAAK,GAAG5C,GAAG,CAACwC,QAAD,EAAW,0BAAX,CAAjB,CAPgC,CAShC;;AACA,cAAMK,MAAM,GAAG7C,GAAG,CAACqC,CAAD,EAAI,4BAAJ,CAAlB;AACA,cAAMS,QAAQ,GAAGd,KAAK,CAACS,IAAN,CAAYM,IAAD,IAAUA,IAAI,CAACJ,EAAL,KAAYE,MAAjC,CAAjB;AACA,cAAMG,OAAO,GAAGhD,GAAG,CAAC8C,QAAD,EAAW,iBAAX,CAAnB,CAZgC,CAchC;;AACA,cAAMG,UAAU,GAAGjD,GAAG,CAACqC,CAAD,EAAI,gCAAJ,CAAtB,CAfgC,CAgBhC;;AACA,cAAMa,OAAO,GAAG,MAAhB;AACA,cAAMC,YAAY,GAAGhB,SAAS,CAACM,IAAV,CAClBW,QAAD,IAAcA,QAAQ,CAACT,EAAT,KAAgBM,UADX,CAArB;AAGA,cAAMI,aAAa,GAAGrD,GAAG,CAACmD,YAAD,EAAe,2BAAf,CAAzB,CArBgC,CAuBhC;;AACApB,QAAAA,UAAU,CAACuB,IAAX,CAAgB;AACdhB,UAAAA,IADc;AAEde,UAAAA,aAAa,EAAE,IAAIE,IAAJ,CAASF,aAAT,CAFD;AAGdpC,UAAAA,MAHc;AAId+B,UAAAA,OAJc;AAKdJ,UAAAA,KAAK,EAAEA,KAAK,KAAK,IAAV,GAAiBA,KAAjB,GAAyB,KALlB;AAMdM,UAAAA;AANc,SAAhB;AAQD,OAhCD,EAbmC,CA8CnC;;AACAnB,MAAAA,UAAU,CAACyB,IAAX,CAAgB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACJ,aAAF,GAAkBK,CAAC,CAACL,aAA9C;AACA,WAAKlC,QAAL,CAAc;AAAEY,QAAAA;AAAF,OAAd;AACD;AACF;;AAmBD4B,EAAAA,QAAQ,GAAG;AAAA,UACDC,eADC,GACmB,KAAKC,KADxB,CACDD,eADC;AAET,SAAKE,UAAL,GAAkBC,WAAW,CAC3B,MAAM,KAAKnD,aAAL,CAAmBgD,eAAnB,CADqB,EAE3B,KAF2B,CAA7B;AAID;;AAEDI,EAAAA,iBAAiB,GAAG;AAAA,UACVJ,eADU,GACU,KAAKC,KADf,CACVD,eADU;AAElB,SAAKhD,aAAL,CAAmBgD,eAAnB;AAEA,SAAKD,QAAL;AACD;;AAEDM,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAAA,UACpBN,eADoB,GACA,KAAKC,KADL,CACpBD,eADoB;;AAG5B,QAAIM,SAAS,CAACN,eAAV,KAA8BA,eAAlC,EAAmD;AACjD,WAAKhD,aAAL,CAAmBgD,eAAnB,EADiD,CAGjD;;AACAO,MAAAA,aAAa,CAAC,KAAKL,UAAN,CAAb;AACA,WAAKH,QAAL;AACD;AACF;;AAEDS,EAAAA,oBAAoB,GAAG;AACrBD,IAAAA,aAAa,CAAC,KAAKL,UAAN,CAAb;AACD;;AAEDO,EAAAA,MAAM,GAAG;AAAA,wBAC8B,KAAKC,KADnC;AAAA,UACCvC,UADD,eACCA,UADD;AAAA,UACaX,YADb,eACaA,YADb;AAAA,UAECmD,YAFD,GAEkB,KAAKV,KAFvB,CAECU,YAFD;AAGP,WACE,oBAAC,OAAD;AACE,MAAA,OAAO,EAAElE,OADX;AAEE,MAAA,UAAU,EAAE0B,UAFd;AAGE,MAAA,YAAY,EAAEwC,YAHhB;AAIE,MAAA,YAAY,EAAEnD,YAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAQD;;AA3I0C;;AAAvCd,c,CACGkE,S,GAAY;AACjBD,EAAAA,YAAY,EAAEzE,SAAS,CAAC2E,IADP;AAEjBb,EAAAA,eAAe,EAAE9D,SAAS,CAAC4E;AAFV,C;AA6IrB,OAAO,MAAMC,KAAK,GAAGrE,cAAd","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { TableUI } from \"./ui\";\r\nimport get from \"lodash/get\";\r\nimport * as axios from \"axios\"; // for making API calls\r\n\r\nconst BASE_URL = \"https://api-v3.mbta.com\";\r\nconst ROUTE_TYPE = 2; // 2=commuter rail\r\n// const DIRECTION_ID = 0; // departuring from\r\nconst INCLUDES = [\"stop\", \"trip\", \"schedule\"];\r\nconst HEADERS = [\r\n  \"Carrier\",\r\n  \"Time\",\r\n  \"Destination\",\r\n  \"Train#\",\r\n  \"Track#\",\r\n  \"Status\",\r\n];\r\n\r\nclass TableContainer extends React.Component {\r\n  static propTypes = {\r\n    setSelection: PropTypes.func,\r\n    selectedStation: PropTypes.string,\r\n  };\r\n\r\n  /* constructor(props) {\r\n    super(props);\r\n    this.getDepartures = this.getDepartures.bind(this);\r\n    this.buildUrl = this.buildUrl.bind(this);\r\n    this.processResponse = this.processResponse.bind(this);\r\n    this.state = {\r\n      errorMessage: null,\r\n      departures: null,\r\n    };\r\n  }\r\n*/\r\n\r\n  buildUrl = (station) => {\r\n    // const filters = `filter[stop]=${station}&filter[route_type]=${ROUTE_TYPE}&filter[direction_id]=${DIRECTION_ID}`;\r\n    const filters = `filter[stop]=${station}&filter[route_type]=${ROUTE_TYPE}`;\r\n\r\n    return `${BASE_URL}/predictions?${filters}&include=${INCLUDES.join()}`;\r\n  };\r\n\r\n  processResponse(response) {\r\n    const included = response.included;\r\n    const predictionsResponse = response.data;\r\n    if (predictionsResponse && included) {\r\n      // if departure_time is null, it means a final stop, so we remove those:\r\n      const filteredDepartures = predictionsResponse.filter(\r\n        (dp) => dp.attributes.departure_time !== null\r\n      );\r\n\r\n      const departures = [];\r\n\r\n      // get trips, stops and schedules which we'll read from later:\r\n      const trips = included.filter((dp) => dp.type === \"trip\");\r\n      const stops = included.filter((dp) => dp.type === \"stop\");\r\n      const schedules = included.filter((dp) => dp.type === \"schedule\");\r\n\r\n      filteredDepartures.forEach((p) => {\r\n        const status = get(p, \"attributes.status\");\r\n        const name = get(p, \"relationships.route.data.id\");\r\n\r\n        // get details from the stop by stopId so we can get the track\r\n        const stopId = get(p, \"relationships.stop.data.id\");\r\n        const stopInfo = stops.find((stop) => stop.id === stopId);\r\n        const track = get(stopInfo, \"attributes.platform_code\");\r\n\r\n        // get details from the trip by tripId so we can get the train #\r\n        const tripId = get(p, \"relationships.trip.data.id\");\r\n        const tripInfo = trips.find((trip) => trip.id === tripId);\r\n        const vehicle = get(tripInfo, \"attributes.name\");\r\n\r\n        // get details from the schedule by scheduleId so we can get the departure time\r\n        const scheduleId = get(p, \"relationships.schedule.data.id\");\r\n        //get details for MBTA as the only carrier\r\n        const carrier = \"MBTA\";\r\n        const scheduleInfo = schedules.find(\r\n          (schedule) => schedule.id === scheduleId\r\n        );\r\n        const departureTime = get(scheduleInfo, \"attributes.departure_time\");\r\n\r\n        // gather all the information\r\n        departures.push({\r\n          name,\r\n          departureTime: new Date(departureTime),\r\n          status,\r\n          vehicle,\r\n          track: track !== null ? track : \"TBD\",\r\n          carrier,\r\n        });\r\n      });\r\n      // sort departures in ascending order\r\n      departures.sort((a, b) => a.departureTime - b.departureTime);\r\n      this.setState({ departures });\r\n    }\r\n  }\r\n\r\n  getDepartures = (station) => {\r\n    const url = this.buildUrl(station);\r\n\r\n    const t = this;\r\n    axios\r\n      .get(url)\r\n      .then(function (response) {\r\n        if (response.status === 200 && response.data) {\r\n          t.setState({ errorMessage: null });\r\n          t.processResponse(response.data);\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        t.setState({ errorMessage: error });\r\n      });\r\n  };\r\n\r\n  setTimer() {\r\n    const { selectedStation } = this.props;\r\n    this.intervalID = setInterval(\r\n      () => this.getDepartures(selectedStation),\r\n      60000\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { selectedStation } = this.props;\r\n    this.getDepartures(selectedStation);\r\n\r\n    this.setTimer();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { selectedStation } = this.props;\r\n\r\n    if (prevProps.selectedStation !== selectedStation) {\r\n      this.getDepartures(selectedStation);\r\n\r\n      // clearInterval and reset again:\r\n      clearInterval(this.intervalID);\r\n      this.setTimer();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.intervalID);\r\n  }\r\n\r\n  render() {\r\n    const { departures, errorMessage } = this.state;\r\n    const { setSelection } = this.props;\r\n    return (\r\n      <TableUI\r\n        headers={HEADERS}\r\n        departures={departures}\r\n        setSelection={setSelection}\r\n        errorMessage={errorMessage}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport const Table = TableContainer;\r\n"]},"metadata":{},"sourceType":"module"}